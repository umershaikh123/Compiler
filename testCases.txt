



public class shapes  {
 
public Static int[] arr = new int[0];
   public Static main() {
      public int a,b,d,c,d;
   }
}


success

class
public abstract class circle extends shapes 
public abstract class circle implements a,b,c 
public abstract class circle implements a

Attributes
public int a,b,d,c,d;
public int a;
public int[] arr;
public int[] arr = {1,2,3,4};
public string[] arr = {"abc","dfg"};
public char[] arr = {'a','b'};
public double[] arr = {1.23,4.34};
public int[] arr = new int[0];
public Static int[] arr = new int[0];


array_use
public abstract class circle implements a  {
 
   

   public Static main() {
   arr[0] = 10;
    arr[2]; 
   }
  
}

 public ArrayList  [Integer]  list = new ArrayList [Integer] ;
public HashMap  [Integer, Integer]  map = new HashMap [Integer , Integer] ;


  public constructor(int a , int b , int c , int d) {

  }



//Interfaces and multiple classes

interface cow  {
    public int a = 10;
    public Static int a = 10;
    public animalSound() : int;
    public animalSound() : int;
    public animalSound() : int;
} 

 interface cat  {
 
} 


public abstract class circle Implements cat,cow  {
    
}

public abstract class circle Implements a,b,c  {
    
}  


//object

public abstract class circle Implements cat,cow  {
    public Static main() {
        Person obj;
        Person obj = new Person();
    }
}


     public fun() : int {

    }



public Static main() {
 int a += 2; 
}


public abstract fun(int a, int b) : int ;


do {
        
}
while(a <= 20 && b > 50 || d < 2) ;


if(20>18){
    public int a = 20;
    }
  else if (20>18) {
      public string s  = "abc";
  }
  else if (20>18) {
      public string s  = "abc";
  }

  else{
      public string s  = "abc";
  }


  for (int a; i < 0; i ++) {

  }

  a.b[3] = 10;
  a.b = 10;
  a.func();
  a.b;
  arr.length;

  arr.clear();
  arr.size();
  arrList.set(2,2);
  hash.put(2,3);


  interface cow  {
    public int a = 10;
    public Static int a = 10;
    public animalSound() : int;
    public animalSound() : int;
    public animalSound() : int;
} 

 interface cat  {
 
} 


public abstract class Person implements cow , cat {
    public string name;
    public int age;
    
    public Person(int age, int number):void {
    this.name = name;
    this.age = age;
}

public Static main () {
    Person p = new Person("John", 25);
    p.greet(a,b);


    if(20>18){
      public int a = 20;
      }
    else{
        public string s  = "abc";
    }

    while(a <= 20 && b > 50 || d < 2) {

    }


}


}


public class circle extends a,b,c  {
    
}  


public func (int age, int number):void {
    this.name = name;
    this.age = age;
}

    public constructor (int age, int number)  {
    this.name = name;
    this.age = age;
}

public Static func (int age, int number) : void {
    
}
